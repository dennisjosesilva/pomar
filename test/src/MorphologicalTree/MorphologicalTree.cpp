#include "../../catch.hpp"
#include <pomar/MorphologicalTree/MorphologicalTree.hpp>
#include <numeric>
#include <algorithm>

#include <iostream>


using namespace pomar;

SCENARIO("Morphological Tree initialize correctly") {
  GIVEN("An parent vector with 5 nodes generated by a set of vertices and by a order (increase)") {
    std::vector<unsigned char> vertices {
        2,0,3,
        2,1,3,
	7,0,3
    };

    std::vector<int> parent {
        4,1,4,
	0,1,2,
	0,1,2
    };

    std::vector<int> sortedIndex(vertices.size());
    std::iota(sortedIndex.begin(), sortedIndex.end(), 0);
    std::sort(sortedIndex.begin(), sortedIndex.end(), [&vertices](int i1, int i2) { return vertices[i1] > vertices[i2]; });

    WHEN("initialized a Morphological tree (max-tree)") {
      MorphologicalTree<unsigned char> tree(parent, sortedIndex, vertices);

      THEN("it should contains 5 nodes") {
	REQUIRE(tree.getNumberofNodes() == 5);
      }
      THEN("it should navigate the nodes in the following (level, number of CNPs)  order: (7,1), (3,3), (2,2), (1,1), (0,2)") {
	std::vector<int> levels {7,3,2,1,0};
	std::vector<int> nCNPs  {1,3,2,1,2};
	int i = 0;

	tree.transverseFromLeavesToRoot([&levels, &nCNPs, &i] (const MTNode<unsigned char>& node) {
	    REQUIRE(levels[i] == node.level());
	    REQUIRE(nCNPs[i++] == node.vertexIndexes().size());
	});
      }
      THEN("It should return parent equals to (-1,0,1,1,2) for the nodes (0,1,2,3,4)") {
	REQUIRE(tree.getNodeParent(0) == -1);
	REQUIRE(tree.getNodeParent(1) == 0);
	REQUIRE(tree.getNodeParent(2) == 1);
	REQUIRE(tree.getNodeParent(3) == 1);
	REQUIRE(tree.getNodeParent(4) == 2);
      }
      THEN("It should return children equals to ({1},{2,3},{},{4},{}) for the nodes (0,1,2,3,4)") {
	REQUIRE(tree.getNodeChildren(0) == std::vector<int>({1}));
	REQUIRE(tree.getNodeChildren(1) == std::vector<int>({2,3}));
	REQUIRE(tree.getNodeChildren(2) == std::vector<int>({4}));
	REQUIRE(tree.getNodeChildren(3) == std::vector<int>());
	REQUIRE(tree.getNodeChildren(4) == std::vector<int>());
      }
    }
  }
}
